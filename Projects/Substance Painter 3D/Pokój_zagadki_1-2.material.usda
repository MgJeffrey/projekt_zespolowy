#usda 1.0
(
    "Exported from Adobe Substance 3D Painter 11.0.1"
    defaultPrim = "RootNode"
)

def "RootNode"
{
    def Scope "material"
    {
        def Material "Desk_wood" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Desk wood_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Desk wood_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Desk wood_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Desk wood_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Desk wood_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Desk wood_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Desk_wood.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Desk_wood/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Frozen_white_metal" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Frozen white metal_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Frozen white metal_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Frozen white metal_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Frozen white metal_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Frozen white metal_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Frozen white metal_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Frozen_white_metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Frozen_white_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "blinds_plastic" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_plastic_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_plastic_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_plastic_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_plastic_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_plastic_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_plastic_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "blinds_fabric" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_fabric_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_fabric_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_fabric_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_fabric_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_fabric_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_fabric_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_fabric.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "blinds_tie" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_tie_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_tie_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_tie_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_tie_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_tie_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_blinds_tie_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/blinds_tie.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/blinds_tie/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Transparent_plastic" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Transparent plastic_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Transparent plastic_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Transparent plastic_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Transparent plastic_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Transparent plastic_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Transparent plastic_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Transparent_plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Transparent_plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "klamka" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klamka_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klamka_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klamka_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klamka_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klamka_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klamka_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/klamka/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/klamka/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/klamka/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/klamka/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/klamka/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/klamka/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/klamka/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/klamka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klamka.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klamka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Clean_Keyboard" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Clean Keyboard_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Clean Keyboard_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Clean Keyboard_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Clean Keyboard_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Clean Keyboard_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Clean Keyboard_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Clean_Keyboard.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Clean_Keyboard/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Lock_metal" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Lock_metal_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Lock_metal_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Lock_metal_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Lock_metal_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Lock_metal_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Lock_metal_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Lock_metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Lock_metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "zamek_k____dka" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zamek_kłódka_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zamek_kłódka_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zamek_kłódka_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zamek_kłódka_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zamek_kłódka_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zamek_kłódka_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zamek_k____dka.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zamek_k____dka/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "klucz" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klucz_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klucz_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klucz_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klucz_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klucz_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_klucz_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/klucz/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/klucz/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/klucz/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/klucz/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/klucz/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/klucz/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/klucz/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/klucz/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/klucz.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/klucz/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "ComputerCase" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ComputerCase_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ComputerCase_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ComputerCase_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ComputerCase_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ComputerCase_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ComputerCase_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ComputerCase.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ComputerCase/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Office_Chair_Fabric" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Fabric_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Fabric_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Fabric_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Fabric_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Fabric_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Fabric_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Fabric.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Fabric/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Office_Chair_Metal" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Metal_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Metal_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Metal_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Metal_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Metal_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Metal_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Office_Chair_Painted_Metal" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Painted Metal_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Painted Metal_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Painted Metal_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Painted Metal_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Painted Metal_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Painted Metal_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Painted_Metal.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Painted_Metal/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Office_Chair_Plastic" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Plastic_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Plastic_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Plastic_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Plastic_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Plastic_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Office Chair_Plastic_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Office_Chair_Plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Office_Chair_Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "book_cover" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_book cover_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_book cover_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_book cover_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_book cover_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_book cover_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_book cover_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/book_cover/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/book_cover/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/book_cover/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/book_cover/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/book_cover/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/book_cover/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/book_cover/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/book_cover/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/book_cover.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/book_cover/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "paper" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_paper_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_paper_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_paper_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_paper_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_paper_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_paper_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/paper/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/paper/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/paper/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/paper/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/paper/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/paper/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/paper/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/paper/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/paper.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/paper.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/paper.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/paper/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Page_1" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 1_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 1_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 1_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 1_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 1_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 1_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Page_1/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Page_1/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Page_1/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Page_1/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Page_1/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Page_1/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Page_1/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Page_1/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_1.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_1/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Page_2" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 2_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 2_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 2_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 2_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 2_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Page 2_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Page_2/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Page_2/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Page_2/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Page_2/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Page_2/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Page_2/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Page_2/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Page_2/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Page_2.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Page_2/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Plastic" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Plastic/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Plastic/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Plastic/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Plastic/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Light" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Light_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Light_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Light_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Light_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Light_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Light_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Light/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Light/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Light/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Light/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Light/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Light/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Light/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Light/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Light.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Light.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Light.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Light/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "monitor_plastic_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_plastic.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_plastic.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_plastic.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_plastic.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_plastic.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_plastic.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_plastic_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_plastic_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "monitor_metal_white_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal white.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal white.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal white.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal white.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal white.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal white.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_white_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_white_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "ekran_monitora" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ekran_monitora_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ekran_monitora_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ekran_monitora_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ekran_monitora_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ekran_monitora_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ekran_monitora_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/ekran_monitora.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/ekran_monitora/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "monitor_screen_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_screen.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_screen.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_screen.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_screen.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_screen.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_screen.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_screen_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_screen_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "monitor_metal_01_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal 01.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal 01.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal 01.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal 01.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal 01.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_metal 01.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_metal_01_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_metal_01_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "monitor_buttons_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_buttons.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_buttons.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_buttons.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_buttons.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_buttons.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_buttons.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_buttons_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_buttons_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "monitor_led_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_led.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_led.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_led.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_led.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_led.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_monitor_led.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/monitor_led_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/monitor_led_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Mouse___Shiny_Grey" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Shiny Grey_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Shiny Grey_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Shiny Grey_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Shiny Grey_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Shiny Grey_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Shiny Grey_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Shiny_Grey.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Shiny_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Mouse___Mat_Grey" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Mat Grey_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Mat Grey_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Mat Grey_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Mat Grey_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Mat Grey_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Mat Grey_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Mat_Grey.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Mat_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Mouse___Wheel_Grey" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Wheel Grey_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Wheel Grey_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Wheel Grey_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Wheel Grey_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Wheel Grey_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Mouse - Wheel Grey_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Mouse___Wheel_Grey.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Mouse___Wheel_Grey/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Box" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Box_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Box_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Box_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Box_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Box_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Box_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Box/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Box/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Box/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Box/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Box/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Box/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Box/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Box/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Box.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Box.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Box.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Box/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Oak_Floor_Hungarian_Clean" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Oak-Floor-Hungarian-Clean_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Oak-Floor-Hungarian-Clean_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Oak-Floor-Hungarian-Clean_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Oak-Floor-Hungarian-Clean_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Oak-Floor-Hungarian-Clean_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Oak-Floor-Hungarian-Clean_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Oak_Floor_Hungarian_Clean.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Oak_Floor_Hungarian_Clean/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Painted_Plaster_Wall_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Painted Plaster Wall.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Painted Plaster Wall.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Painted Plaster Wall.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Painted Plaster Wall.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Painted Plaster Wall.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Painted Plaster Wall.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Painted_Plaster_Wall_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Painted_Plaster_Wall_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "listwa" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_listwa_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_listwa_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_listwa_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_listwa_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_listwa_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_listwa_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/listwa/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/listwa/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/listwa/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/listwa/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/listwa/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/listwa/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/listwa/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/listwa/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/listwa.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/listwa/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Przelacznik" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Przelacznik_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Przelacznik_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Przelacznik_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Przelacznik_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Przelacznik_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Przelacznik_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Przelacznik.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Przelacznik/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Plastic_White_11" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic White 11_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic White 11_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic White 11_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic White 11_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic White 11_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic White 11_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_White_11.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_White_11/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Plastic_Fire_Alarm_Red" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_Red_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_Red_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_Red_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_Red_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_Red_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_Red_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_Red.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_Red/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "__ciana_od_alarmu" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ściana_od_alarmu_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ściana_od_alarmu_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ściana_od_alarmu_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ściana_od_alarmu_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ściana_od_alarmu_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_ściana_od_alarmu_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/__ciana_od_alarmu.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/__ciana_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "AlarmGlass_SimpleShader" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_AlarmGlass_SimpleShader_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_AlarmGlass_SimpleShader_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_AlarmGlass_SimpleShader_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_AlarmGlass_SimpleShader_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_AlarmGlass_SimpleShader_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_AlarmGlass_SimpleShader_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/AlarmGlass_SimpleShader.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/AlarmGlass_SimpleShader/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "zasilacz_od_alarmu" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zasilacz_od_alarmu_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zasilacz_od_alarmu_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zasilacz_od_alarmu_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zasilacz_od_alarmu_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zasilacz_od_alarmu_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_zasilacz_od_alarmu_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/zasilacz_od_alarmu.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/zasilacz_od_alarmu/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Strobe_Color" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Strobe_Color_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Strobe_Color_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Strobe_Color_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Strobe_Color_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Strobe_Color_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Strobe_Color_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Strobe_Color.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Strobe_Color/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Plastic_Fire_Alarm_White" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_White_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_White_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_White_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_White_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_White_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Plastic_Fire Alarm_White_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Plastic_Fire_Alarm_White.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Plastic_Fire_Alarm_White/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Stainless_Steel_002" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.002_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.002_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.002_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.002_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.002_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.002_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_002.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_002/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Stainless_Steel_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Stainless Steel.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Stainless_Steel_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Stainless_Steel_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Material_001" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Material.001_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Material.001_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Material.001_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Material.001_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Material.001_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Material.001_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Material_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Material_001/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Material_001/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Material_001/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Material_001/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Material_001/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Material_001/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Material_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Material_001.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Material_001/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Chalkboard_Green" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Chalkboard_Green_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Chalkboard_Green_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Chalkboard_Green_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Chalkboard_Green_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Chalkboard_Green_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Chalkboard_Green_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Chalkboard_Green.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Chalkboard_Green/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Wood_dark" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Wood_dark_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Wood_dark_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Wood_dark_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Wood_dark_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Wood_dark_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Wood_dark_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Wood_dark.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Wood_dark/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "rama" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_rama_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_rama_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_rama_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_rama_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_rama_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_rama_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/rama/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/rama/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/rama/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/rama/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/rama/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/rama/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/rama/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/rama/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/rama.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/rama.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/rama.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/rama/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "Glass" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Glass_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Glass_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Glass_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Glass_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Glass_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_Glass_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/Glass/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/Glass/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/Glass/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/Glass/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Glass/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/Glass/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/Glass/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Glass/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/Glass.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/Glass/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }

        def Material "parapet" (
            customData = {
                dictionary adobe = {
                    dictionary painter = {
                        asset painterProject_spp = @D:/Studia/3 lata męnki/Semestr6/GitHub Zespołowy/Projects/Substance Painter 3D/Pokój_zagadki_1-2.spp@
                    }
                }
            }
        )
        {
            asset inputs:basecolor_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_parapet_BaseColor.png@
            asset inputs:compositedAmbientOcclusion_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_parapet_OcclusionRoughnessMetallic.png@
            asset inputs:compositedNormalDX_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_parapet_Normal.png@
            asset inputs:metallic_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_parapet_OcclusionRoughnessMetallic.png@
            asset inputs:opacity_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_parapet_BaseColor.png@
            asset inputs:roughness_tex = @Pokój_zagadki_1-2_textures/Zagadki1-2_parapet_OcclusionRoughnessMetallic.png@
            token outputs:adobe:surface.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/AdobeStandardMaterial_4_0Shader.outputs:surface>
            token outputs:displacement.connect = </RootNode/material/parapet/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:displacement>
            token outputs:surface.connect = </RootNode/material/parapet/UsdPreviewSurface/UsdPreviewSurfaceShader.outputs:surface>

            def NodeGraph "UsdPreviewSurface"
            {
                def Shader "UsdPreviewSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float3 inputs:diffuseColor.connect = </RootNode/material/parapet/UsdPreviewSurface/diffuseColorTextureShader.outputs:rgb>
                    float inputs:ior = 1.4
                    float inputs:metallic.connect = </RootNode/material/parapet/UsdPreviewSurface/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/parapet/UsdPreviewSurface/normalTextureShader.outputs:rgb>
                    float inputs:occlusion.connect = </RootNode/material/parapet/UsdPreviewSurface/occlusionTextureShader.outputs:r>
                    float inputs:roughness.connect = </RootNode/material/parapet/UsdPreviewSurface/roughnessTextureShader.outputs:g>
                    token outputs:displacement
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "diffuseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/parapet/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "occlusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/UsdPreviewSurface/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }
            }

            def NodeGraph "AdobeStandardMaterial_4_0"
            {
                def Shader "AdobeStandardMaterial_4_0Shader"
                {
                    uniform token info:id = "AdobeStandardMaterial_4_0"
                    float inputs:ambientOcclusion.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/ambientOcclusionTextureShader.outputs:r>
                    float3 inputs:baseColor.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/baseColorTextureShader.outputs:rgb>
                    float inputs:coatIOR = 1.6
                    float inputs:IOR = 1.4
                    float inputs:metallic.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/metallicTextureShader.outputs:b>
                    normal3f inputs:normal.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/normalTextureShader.outputs:rgb>
                    float inputs:roughness.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/roughnessTextureShader.outputs:g>
                    token outputs:surface
                }

                def Shader "TexCoordReader"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "st"
                    float2 outputs:result
                }

                def Shader "baseColorTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:basecolor_tex>
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float3 outputs:rgb
                }

                def Shader "roughnessTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:roughness_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:g
                }

                def Shader "metallicTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:metallic_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:b
                }

                def Shader "normalTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    float4 inputs:bias = (-1, 1, -1, 0)
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:compositedNormalDX_tex>
                    float4 inputs:scale = (2, -2, 2, 1)
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    normal3f outputs:rgb
                }

                def Shader "ambientOcclusionTextureShader"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file.connect = </RootNode/material/parapet.inputs:compositedAmbientOcclusion_tex>
                    token inputs:sourceColorSpace = "raw"
                    float2 inputs:st.connect = </RootNode/material/parapet/AdobeStandardMaterial_4_0/TexCoordReader.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                }
            }
        }
    }

    over "A4_kartka"
    {
        over "A4_kartka" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Basic_Blinds"
    {
        over "Cylinder"
        {
            over "Cylinder" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/blinds_plastic>
            }

            over "Cylinder_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/blinds_fabric>
            }

            over "Cylinder_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/blinds_tie>
            }
        }
    }

    over "Basic_Blinds_001"
    {
        over "Cylinder_001"
        {
            over "Cylinder_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/blinds_plastic>
            }

            over "Cylinder_001_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/blinds_fabric>
            }

            over "Cylinder_001_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/blinds_tie>
            }
        }
    }

    over "Biurko_Dwie_szuflady"
    {
        over "Biurko_Dwie_szuflady" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Biurko_Prowadzacego"
    {
        over "Biurko_Prowadz__cego"
        {
            over "Biurko_Prowadz__cego" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }
        }

        over "Otwierana_Szafka"
        {
            over "Otwierana_Szafka" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }

            over "Otwierana_Szafka_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Frozen_white_metal>
            }
        }

        over "Szuflada_1"
        {
            over "Szuflada_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }

            over "Szuflada_1_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Frozen_white_metal>
            }
        }

        over "Szuflada_zamykana_1"
        {
            over "Szuflada_zamykana_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }

            over "Szuflada_zamykana_1_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Frozen_white_metal>
            }

            over "Szuflada_zamykana_1_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Stainless_Steel_002>
            }

            over "Szuflada_zamykana_1_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Stainless_Steel_001>
            }

            over "Szuflada_zamykana_1_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Material_001>
            }
        }

        over "Szuflada_zamykana_2"
        {
            over "Szuflada_zamykana_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }

            over "Szuflada_zamykana_2_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Frozen_white_metal>
            }

            over "Szuflada_zamykana_2_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Stainless_Steel_002>
            }

            over "Szuflada_zamykana_2_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Stainless_Steel_001>
            }

            over "Szuflada_zamykana_2_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Material_001>
            }
        }
    }

    over "Biurko_Prowadz__cego_001"
    {
        over "Biurko_Prowadz__cego_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Biurko_Prowadz__cego_002"
    {
        over "Biurko_Prowadz__cego_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Biurko_Prowadz__cego_003"
    {
        over "Biurko_Prowadz__cego_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Biurko_Prowadz__cego_004"
    {
        over "Biurko_Prowadz__cego_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Door_Group"
    {
        over "CTRL_Baseboard"
        {
            over "CTRL_Baseboard" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }
        }

        over "CTRL_Hole"
        {
            over "CTRL_Hole" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }
        }

        over "DoorFrame"
        {
            over "DoorFrame" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }

            over "Door"
            {
                over "Door" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/Desk_wood>
                }

                over "Handle_Back"
                {
                    over "Handle_Back" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/material/Desk_wood>
                    }
                }

                over "Handle_Front"
                {
                    over "Handle_Front" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/material/klamka>
                    }
                }
            }
        }
    }

    over "Keyboard"
    {
        over "Keyboard" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Clean_Keyboard>
        }
    }

    over "Keyboard_001"
    {
        over "Keyboard_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Clean_Keyboard>
        }
    }

    over "Keyboard_002"
    {
        over "Keyboard_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Clean_Keyboard>
        }
    }

    over "Keyboard_003"
    {
        over "Keyboard_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Clean_Keyboard>
        }
    }

    over "Keyboard_004"
    {
        over "Keyboard_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Clean_Keyboard>
        }
    }

    over "Klodka"
    {
        over "Klodka" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Lock_metal>
        }

        over "Klodka_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/zamek_k____dka>
        }
    }

    over "Klucz"
    {
        over "Klucz" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/klucz>
        }
    }

    over "Komputer"
    {
        over "Komputer" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ComputerCase>
        }
    }

    over "Komputer_001"
    {
        over "Komputer_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ComputerCase>
        }
    }

    over "Komputer_002"
    {
        over "Komputer_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ComputerCase>
        }
    }

    over "Komputer_003"
    {
        over "Komputer_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ComputerCase>
        }
    }

    over "Komputer_004"
    {
        over "Komputer_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ComputerCase>
        }
    }

    over "Krzeslo_Obrotowe"
    {
        over "Krzeslo_Obrotowe" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Fabric>
        }

        over "Krzeslo_Obrotowe_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Metal>
        }

        over "Krzeslo_Obrotowe_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Painted_Metal>
        }

        over "Krzeslo_Obrotowe_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Plastic>
        }
    }

    over "Krzeslo_Obrotowe_001"
    {
        over "Krzeslo_Obrotowe_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Fabric>
        }

        over "Krzeslo_Obrotowe_001_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Metal>
        }

        over "Krzeslo_Obrotowe_001_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Painted_Metal>
        }

        over "Krzeslo_Obrotowe_001_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Plastic>
        }
    }

    over "Krzeslo_Obrotowe_002"
    {
        over "Krzeslo_Obrotowe_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Fabric>
        }

        over "Krzeslo_Obrotowe_002_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Metal>
        }

        over "Krzeslo_Obrotowe_002_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Painted_Metal>
        }

        over "Krzeslo_Obrotowe_002_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Plastic>
        }
    }

    over "Krzeslo_Obrotowe_003"
    {
        over "Krzeslo_Obrotowe_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Fabric>
        }

        over "Krzeslo_Obrotowe_003_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Metal>
        }

        over "Krzeslo_Obrotowe_003_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Painted_Metal>
        }

        over "Krzeslo_Obrotowe_003_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Plastic>
        }
    }

    over "Krzeslo_Obrotowe_004"
    {
        over "Krzeslo_Obrotowe_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Fabric>
        }

        over "Krzeslo_Obrotowe_004_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Metal>
        }

        over "Krzeslo_Obrotowe_004_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Painted_Metal>
        }

        over "Krzeslo_Obrotowe_004_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Plastic>
        }
    }

    over "Krzeslo_Obrotowe_005"
    {
        over "Krzeslo_Obrotowe_005" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Fabric>
        }

        over "Krzeslo_Obrotowe_005_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Metal>
        }

        over "Krzeslo_Obrotowe_005_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Painted_Metal>
        }

        over "Krzeslo_Obrotowe_005_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Office_Chair_Plastic>
        }
    }

    over "Ksiazka"
    {
        over "Ksiazka" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/book_cover>
        }

        over "Ksiazka_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/paper>
        }

        over "Ksiazka_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Page_1>
        }

        over "Ksiazka_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Page_2>
        }
    }

    over "Lampa_LED"
    {
        over "Lampa_LED" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Plastic>
        }

        over "Lampa_LED_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Light>
        }
    }

    over "Makieta"
    {
        over "Makieta" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Monitor"
    {
        over "Monitor" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_plastic_001>
        }

        over "Monitor_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_white_001>
        }

        over "Monitor_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ekran_monitora>
        }

        over "Monitor_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_screen_001>
        }

        over "Monitor_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_01_001>
        }

        over "Monitor_5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_buttons_001>
        }

        over "Monitor_6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_led_001>
        }
    }

    over "Monitor_001"
    {
        over "Monitor_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_plastic_001>
        }

        over "Monitor_001_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_white_001>
        }

        over "Monitor_001_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ekran_monitora>
        }

        over "Monitor_001_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_screen_001>
        }

        over "Monitor_001_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_01_001>
        }

        over "Monitor_001_5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_buttons_001>
        }

        over "Monitor_001_6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_led_001>
        }
    }

    over "Monitor_002"
    {
        over "Monitor_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_plastic_001>
        }

        over "Monitor_002_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_white_001>
        }

        over "Monitor_002_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ekran_monitora>
        }

        over "Monitor_002_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_screen_001>
        }

        over "Monitor_002_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_01_001>
        }

        over "Monitor_002_5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_buttons_001>
        }

        over "Monitor_002_6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_led_001>
        }
    }

    over "Monitor_003"
    {
        over "Monitor_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_plastic_001>
        }

        over "Monitor_003_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_white_001>
        }

        over "Monitor_003_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ekran_monitora>
        }

        over "Monitor_003_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_screen_001>
        }

        over "Monitor_003_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_01_001>
        }

        over "Monitor_003_5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_buttons_001>
        }

        over "Monitor_003_6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_led_001>
        }
    }

    over "Monitor_004"
    {
        over "Monitor_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_plastic_001>
        }

        over "Monitor_004_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_white_001>
        }

        over "Monitor_004_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/ekran_monitora>
        }

        over "Monitor_004_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_screen_001>
        }

        over "Monitor_004_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_metal_01_001>
        }

        over "Monitor_004_5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_buttons_001>
        }

        over "Monitor_004_6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/monitor_led_001>
        }
    }

    over "Myszka"
    {
        over "Myszka" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Shiny_Grey>
        }

        over "Myszka_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Mat_Grey>
        }

        over "Myszka_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Wheel_Grey>
        }
    }

    over "Myszka_001"
    {
        over "Myszka_001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Shiny_Grey>
        }

        over "Myszka_001_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Mat_Grey>
        }

        over "Myszka_001_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Wheel_Grey>
        }
    }

    over "Myszka_002"
    {
        over "Myszka_002" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Shiny_Grey>
        }

        over "Myszka_002_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Mat_Grey>
        }

        over "Myszka_002_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Wheel_Grey>
        }
    }

    over "Myszka_003"
    {
        over "Myszka_003" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Shiny_Grey>
        }

        over "Myszka_003_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Mat_Grey>
        }

        over "Myszka_003_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Wheel_Grey>
        }
    }

    over "Myszka_004"
    {
        over "Myszka_004" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Shiny_Grey>
        }

        over "Myszka_004_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Mat_Grey>
        }

        over "Myszka_004_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Mouse___Wheel_Grey>
        }
    }

    over "Oscyloskop"
    {
        over "Oscyloskop" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Otwierane_Drzwi"
    {
        over "Otwierane_Drzwi" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }

        over "Otwierane_Drzwi_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Frozen_white_metal>
        }
    }

    over "Paczka_bezpiecznikow"
    {
        over "Paczka_bezpiecznikow" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Box>
        }
    }

    over "Pendrive"
    {
        over "Pendrive" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Plane"
    {
        over "Plane" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Oak_Floor_Hungarian_Clean>
        }

        over "Plane_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Painted_Plaster_Wall_001>
        }

        over "Plane_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/listwa>
        }
    }

    over "Projektor"
    {
        over "Projektor" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Skrzynka_z_Bezpiecznikami"
    {
        over "Bezpieczniki"
        {
            over "Bezpieczniki" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }
        }

        over "Drzwiczki"
        {
            over "Drzwiczki" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Transparent_plastic>
            }
        }

        over "Przelacznik_l"
        {
            over "Przelacznik_l" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Przelacznik>
            }
        }

        over "Przelacznik_p"
        {
            over "Przelacznik_p" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Przelacznik>
            }
        }

        over "Przelacznik_s"
        {
            over "Przelacznik_s" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Przelacznik>
            }
        }

        over "Skrzynka"
        {
            over "Skrzynka" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Plastic_White_11>
            }
        }
    }

    over "Sufit"
    {
        over "Sufit" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Painted_Plaster_Wall_001>
        }
    }

    over "Swiatlo_awaryjne"
    {
        over "Swiatlo_awaryjne" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Plastic_Fire_Alarm_Red>
        }

        over "Swiatlo_awaryjne_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/__ciana_od_alarmu>
        }

        over "Swiatlo_awaryjne_2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/AlarmGlass_SimpleShader>
        }

        over "Swiatlo_awaryjne_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/zasilacz_od_alarmu>
        }

        over "Swiatlo_awaryjne_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Strobe_Color>
        }

        over "Swiatlo_awaryjne_5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Plastic_Fire_Alarm_White>
        }

        over "Swiatlo_awaryjne_Text"
        {
            over "Swiatlo_awaryjne_Text" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Plastic_Fire_Alarm_White>
            }
        }

        over "Swiatlo_awaryjne_Text2"
        {
            over "Swiatlo_awaryjne_Text2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Plastic_Fire_Alarm_White>
            }
        }
    }

    over "Szafka"
    {
        over "Szafka" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }

    over "Szuflada_"
    {
        over "Szuflada_" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }

        over "Szuflada__1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Frozen_white_metal>
        }
    }

    over "Szuflada__001"
    {
        over "Szuflada__001" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }

        over "Szuflada__001_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Frozen_white_metal>
        }
    }

    over "Tablica"
    {
        over "Tablica" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Chalkboard_Green>
        }

        over "Tablica_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Wood_dark>
        }
    }

    over "Window_Group"
    {
        over "WindowFrame"
        {
            over "WindowFrame" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }

            over "Window_L"
            {
                over "Window_L" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/rama>
                }

                over "Window_L_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/Glass>
                }

                over "Handle"
                {
                    over "Handle" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/material/Desk_wood>
                    }
                }
            }

            over "Window_R"
            {
                over "Window_R" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/rama>
                }

                over "Window_R_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/Glass>
                }

                over "Handle_001"
                {
                    over "Handle_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/material/Desk_wood>
                    }
                }
            }

            over "Windows_Sill"
            {
                over "Windows_Sill" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/parapet>
                }
            }
        }
    }

    over "Window_Group_001"
    {
        over "WindowFrame_001"
        {
            over "WindowFrame_001" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </RootNode/material/Desk_wood>
            }

            over "Window_L_001"
            {
                over "Window_L_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/rama>
                }

                over "Window_L_001_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/Glass>
                }
            }

            over "Window_R_001"
            {
                over "Window_R_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/rama>
                }

                over "Window_R_001_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/Glass>
                }
            }

            over "Windows_Sill_001"
            {
                over "Windows_Sill_001" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </RootNode/material/parapet>
                }
            }
        }
    }

    over "Wtyczka"
    {
        over "Wtyczka" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/material/Desk_wood>
        }
    }
}

